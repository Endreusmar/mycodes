# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y62oXbkj86snMlUy85Rx8R6yMKJhdHK_
"""

origem = (0,0)
destino = (4,4)

enderecos = [(2, 1), (2,2), (8, 3), (5, 3)]

rota = [origem] + enderecos + [destino]

rota

import matplotlib.pyplot as plt

from scipy.spatial.distance import euclidean as distancia_euclidiana

tamanho_rota = len(rota)
distancia_percorrida = 0

for i in range(tamanho_rota):
  x, y = rota[i]
  cor = 'black'
  if i == 0:
    cor = 'blue'
  elif i == tamanho_rota - 1:
    cor = 'red'

  plt.scatter(x,y, color=cor)

  if i < tamanho_rota - 1:
    x1, y1 = rota[i+1]
    dx = x1 - x
    dy = y1 - y
    plt.arrow(x, y, dx, dy, color = 'black', head_width=0.1)
    distancia_percorrida = distancia_percorrida + distancia_euclidiana(rota[i], rota[i+1])

plt.title(f'Rota com ditancia de {round(distancia_percorrida, 2)}')
plt.show()

def desenhar_rota(rota):
  tamanho_rota = len(rota)
  distancia_percorrida = 0

  for i in range(tamanho_rota):
    x,y = rota[i]

    cor = 'black'
    if i == 0:
      cor = 'blue'
    elif i == tamanho_rota - 1:
      cor = 'red'

    plt.scatter(x,y, color=cor)

    if i < tamanho_rota - 1:
      x1, y1 = rota[i+1]
      dx = x1 - x
      dy = y1 - y
      plt.arrow(x, y, dx, dy, color = 'black', head_width=0.1 )

      distancia_percorrida = distancia_percorrida + distancia_euclidiana(rota[i], rota[i+1])
  plt.title(f'Rota com ditancia de {round(distancia_percorrida, 2)}')
  plt.show()

origem = (0,0)
destino = (4,4)

enderecos = [(2,2), (2, 1), (5, 3), (8, 3)]

rota = [origem] + enderecos + [destino]
desenhar_rota(rota)

from itertools import permutations

def calcular_distancia_rota(rota):
  distancia = 0
  tamanho_rota = len(rota)

  for i in range(tamanho_rota):
    if i < tamanho_rota - 1:
      distancia = distancia + distancia_euclidiana(rota[i], rota[i+1])

  return distancia

menor_distancia = float('inf')
menor_rota = None

for permutacao in permutations(enderecos):
  rota = [origem] + list(permutacao) + [destino]
  distancia_rota = calcular_distancia_rota(rota)

  if distancia_rota < menor_distancia:
    menor_distancia = distancia_rota
    menor_rota = rota



print(menor_rota, menor_distancia)
desenhar_rota(menor_rota)

def forca_bruta(origem, destino, enderecos):

  menor_distancia = float('inf')
  menor_rota = None

  for permutacao in permutations(enderecos):
    rota = [origem] + list(permutacao) + [destino]
    distancia_rota = calcular_distancia_rota(rota)

    if distancia_rota < menor_distancia:
      menor_distancia = distancia_rota
      menor_rota = rota



  return menor_rota, menor_distancia

origem = (0,0)
destino = (4,4)

enderecos = [(2, 1),(2,2), (5, 3), (8, 3), (10, 5), (9, 4), (8, 7), (6, 3)]

menor_rota, menor_distancia = forca_bruta(origem, destino, enderecos)
desenhar_rota(menor_rota)

